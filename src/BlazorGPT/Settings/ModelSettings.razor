@using BlazorGPT.Pipeline
@using Microsoft.Extensions.Options

@inject IOptions<PipelineOptions> PipelineOptions
<div class="container">

    <div class="row m-3">
        <div class="col-3">
            <RadzenText Class="mt-3">Model</RadzenText>
        </div>
        <div class="col-9">
            <RadzenDropDown TValue="string"
                            Change="Save"
                            Style="font-size: small;"
                            TValue="string"
                            Data="_models "@bind-Value="@model.Model"/>
        </div>
    </div>
    <div class="row m-3">
        <div class="col-3">
            <RadzenText>Max tokens</RadzenText>

        </div>
        <div class="col-9">
            <RadzenNumeric Change="Save" TValue="int" @bind-Value="@model.MaxTokens" Max="10000" Step="1"></RadzenNumeric>
        </div>
    </div>
    <div class="row m-3">
        <div class="col-3">
            <RadzenText>Temperature</RadzenText>
        </div>
        <div class="col-1">
            <RadzenText>@model.Temperature</RadzenText>
        </div>
        <div class="col-8">
            <RadzenSlider Change="Save" TValue="float" @bind-Value="@model.Temperature" Min="0" Max="1" Step="0.1" Class="me-3"/>
        </div>
    </div>
</div>

@code {


    [Parameter]
    public string? PreSelectedModel { get; set; }

    public string? SelectedModel { get; set; }

    [Parameter]
    public string Class { get; set; }

    [Inject]
    ModelConfigurationService? ModelConfigurationService { get; set; }

    ModelConfiguration model = new();

    
 
    string[] _models;

    protected override void OnInitialized()
    {
        _models = PipelineOptions.Value.Models;
        SelectedModel ??= PreSelectedModel ?? PipelineOptions.Value.Model;
        StateHasChanged();

        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            model = await ModelConfigurationService!.GetConfig();
            StateHasChanged();
        }
    }


    public async Task Save()
    {
        await ModelConfigurationService?.SaveConfig(model)!;
    }

}