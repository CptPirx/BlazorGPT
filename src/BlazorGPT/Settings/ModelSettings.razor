@using BlazorGPT.Pipeline
@using Microsoft.Extensions.Options
@using Blazored.LocalStorage

@inject IOptions<PipelineOptions> PipelineOptions
<div class="container">
    <RadzenRadioButtonList TValue="ChatModelsProvider" @bind-Value=@model.Provider Change="OnModelsProviderChange">
        <Items>
            <RadzenRadioButtonListItem Text="OpenAI" Value="@ChatModelsProvider.OpenAI" />
            <RadzenRadioButtonListItem Text="AzureOpenAI" Value="ChatModelsProvider.AzureOpenAI" />
            <RadzenRadioButtonListItem Text="Local" Value="ChatModelsProvider.Local" />
        </Items>
    </RadzenRadioButtonList>
    <div class="row m-3">
        <div class="col-3">
            <RadzenText Class="mt-3">Model</RadzenText>
        </div>
        <div class="col-9">
            <RadzenDropDown TValue="string"
                            Change="Save"
                            Style="font-size: small;"
                            TValue="string"
                            Data="_models "@bind-Value="@model.Model"/>
        </div>
    </div>

    <div class="row m-3">
        <div class="col-3">
            <RadzenText>Max tokens</RadzenText>

        </div>
        <div class="col-9">
            <RadzenNumeric Change="Save" TValue="int" @bind-Value="@model.MaxTokens" Max="10000" Step="1"></RadzenNumeric>
        </div>
    </div>
    <div class="row m-3">
        <div class="col-3">
            <RadzenText>Temperature</RadzenText>
        </div>
        <div class="col-1">
            <RadzenText>@model.Temperature</RadzenText>
        </div>
        <div class="col-8">
            <RadzenSlider Change="Save" TValue="float" @bind-Value="@model.Temperature" Min="0" Max="1" Step="0.1" Class="me-3"/>
        </div>
    </div>
</div>

@code {


    public string? SelectedModel { get; set; }

    [Parameter]
    public string Class { get; set; }

    [Inject]
    ModelConfigurationService? ModelConfigurationService { get; set; }

    ModelConfiguration model = new();

    
 
    string[] _models;


    private void SetModels(bool setDefault = false)
    {
        switch (model.Provider)
        {
            case ChatModelsProvider.OpenAI:
                if(setDefault) model.Model = PipelineOptions.Value.Providers.OpenAI.ChatModel;
                _models = PipelineOptions.Value.Providers.OpenAI.ChatModels;
                break;
            case ChatModelsProvider.AzureOpenAI:
                if (setDefault) model.Model = PipelineOptions.Value.Providers.AzureOpenAI.ChatModel;
                _models = PipelineOptions.Value.Providers.AzureOpenAI.ChatModels.Select(o => o.Value).ToArray();
                break;
            case ChatModelsProvider.Local:
                if (setDefault) model.Model = PipelineOptions.Value.Providers.Local.ChatModel;
                _models = PipelineOptions.Value.Providers.Local.ChatModels;
                break;
            default:
                throw new ArgumentOutOfRangeException();
            
        }
        SelectedModel = model.Model;
        StateHasChanged();

    }

    private async Task OnModelsProviderChange()
    {
        SetModels(true);
        await Save();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            model =  await ModelConfigurationService!.GetConfig();
            SetModels();
        }
    }

    public async Task Save()
    {
        await ModelConfigurationService?.SaveConfig(model)!;
    }
}