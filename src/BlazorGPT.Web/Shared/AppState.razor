@* @using System.Security.Claims
@using BlazorGPT.Components.Account
@using Microsoft.AspNetCore.Identity
@inject IdentityUserAccessor UserAccessor
@inject UserManager<IdentityUser> UserManager


@inject UserState UserState
<CascadingValue Value="this" Name="AuthState">
    <CascadingValue Value="UserState" Name="UserState">
        <CascadingValue Value="@_userId" Name="UserId">
        @ChildContent
        </CascadingValue>
    </CascadingValue>
</CascadingValue>

@code {

    //[Inject]
    //public AuthenticationStateProvider? AuthenticationStateProvider { get; set; }
    private IdentityUser user = default!;


    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    string? _userId;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    protected override async Task OnParametersSetAsync()
    {
       // user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        _userId = user.Id;
        await GetClaimsPrincipalData();
        StateHasChanged();
    }


    private async Task GetClaimsPrincipalData()
    {

        if (authenticationState is not null)
        {
            var authState = await authenticationState;
            var user = authState?.User;

            if (user?.Identity is not null && user.Identity.IsAuthenticated)
            {
                User = user;
                _userId = User.FindFirstValue(ClaimTypes.NameIdentifier);
                await UserState.SetUser(User);
            }
        }

    }

    public ClaimsPrincipal User { get; set; } = new();

    private AuthenticationState? AuthState { get; set; }

} *@