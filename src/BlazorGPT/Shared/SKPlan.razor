@using Markdig
@using Markdown.ColorCode
@using ColorCode.Styling
@using ColorCode
@using ColorCode.Compilation.Languages
@using Markdown = Markdig.Markdown
@code
{
    [Parameter]
    public string? PlanAsString { get; set; }

    private MarkdownPipeline _markdownPipeline = new MarkdownPipelineBuilder()
        .UseAdvancedExtensions()
      
        .UseBootstrap()
        .UseColorCode(styleDictionary: StyleDictionary.DefaultDark,
            additionalLanguages: new List<ILanguage>()
            {
                new Json(),
                new CSharp(),
                new Cpp(),
                new Css(),
                new Html(),
                new JavaScript(),
                new Php(),

            })
        .Build();

    string? AsMarkdown => Markdown.ToHtml("```csharp\n" + PlanAsString , _markdownPipeline);
 
}

<RadzenPanel AllowCollapse="true" Collapsed="true" Class="m-3">
    <HeaderTemplate>
        Plan
    </HeaderTemplate>
    <ChildContent>

        @((MarkupString)AsMarkdown)

    </ChildContent>
</RadzenPanel>