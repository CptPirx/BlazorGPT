@using Microsoft.SemanticKernel.Planning
@if (Plan != null)
{
    <div class="row">

        <div class="progress col-sm-12">
            <div class="progress-bar" role="progressbar" style="width: @(Progress)%;" aria-valuenow="@(Progress)" aria-valuemin="0" aria-valuemax="100"></div>

        </div>


    </div>
    <div class="row">
        <div class="col-sm-12 border m-3 mb-0">
            <RadzenProgressBar Unit="steps" Max="100" @bind-Value="Progress" ShowValue="true" Mode="ProgressBarMode.Determinate" Class="col-md-12">

            </RadzenProgressBar>


        </div>
    </div>
    <RadzenTree>
        <RadzenTreeItem Text="" Expanded="true">
            <ChildContent>


                <div class="row small">

                    <div class=" col-md-12">
                        @if (Plan != null && Plan?.Steps != null)
                        {
@*                             <div>Steps: @Plan.steps.Count</div>
                            <div>Next: @Plan.next_step_index</div> *@

                            var stepLoop = 0;

                            @foreach (var step in Plan.Steps)
                            {
                                <div class="row">
                                    <div class="col-md-12">
                                        <div class="card text-darkmb-1">
                                            <div class="card-header"  >@step.Name, @step.SkillName</div>
                                            <div class="card-body bg-dark">
                                                <p class="card-title">@step.Description</p>
                                                @* <p class="card-text">Some quick example text to build on the card title and make up the bulk of the card's content.</p> *@
                                            </div>
                                        </div>

                                    </div>
                                </div>
                                stepLoop++;
                            }
                        }
                    </div>

                </div>


                <pre>
 @* @Data  *@
    </pre>
            </ChildContent>
            <Template>
                <b>Plan</b>
                <RadzenIcon Icon="plan"></RadzenIcon>

     
            </Template>
        </RadzenTreeItem>
    </RadzenTree>

}
@code {

    [Parameter]
    public string? PlanAsString { get; set; }

    public Plan? Plan { get; set; }

    protected override void OnParametersSet()
    {
        if (PlanAsString != null)
        {
            Plan = Plan.FromJson(PlanAsString);
        }
    }

    double Progress;
}