@using BlazorGPT.Data
@if (Conversation != null)
{
    <div id="message-pane" class="scroll-pane" style="@Style">
        <BranchedFrom Conversation="@Conversation"/>
        @if (Conversation.Messages.Any())
        {
            <!-- system prompt -->
            <ConversationMessageDisplay
                Message="Conversation.Messages.FirstOrDefault()"
                MessagesCount="Conversation.Messages.Count()" 
                ShowEditButton="Conversation.IsStarted()"
            />
                
            int msgCount = 1;
            @foreach (var message in Conversation.Messages.Skip(1))
            {
                var isLastMessage = Conversation.Messages.IndexOf(message) + 1 == Conversation.Messages.Count();
                
                IAnimation? animation = msgCount > 2 ? new FadeUpLeftAnimation() : null;
                var delay = TimeSpan.FromSeconds(0.5 * (msgCount-2));
                <Animate Animation="@animation" Duration="TimeSpan.FromSeconds(0.5)" Delay="delay">

                    <ConversationMessageDisplay
                        ShowBranches="@ShowBranches"
                        ShowEditButton="Conversation.IsStarted()"
                        ShowRestartButton="RestartConversation.HasDelegate && Conversation.IsStarted() && message.IsAssistantTurn()"
                        ShowCopyButton="CopyConversation.HasDelegate && Conversation.Id != null"
                        OnRestartClicked="RestartConversation"
                        OnCopyClicked="CopyConversation"
                        Message="message">
                    </ConversationMessageDisplay>
                    @if (Conversation.Messages.IndexOf(message) == 1 && Conversation.SKPlan != null)
                    {

                        <SKPlan PlanAsString="@Conversation.SKPlan"></SKPlan>
                    }
                </Animate>

                msgCount++;
            }
        }

    </div>
}
@code
{
    [Inject]
    public ConversationInterop? Interop { get; set; }

    [Parameter]
    public Conversation? Conversation { get; set; }

    [Parameter]
    public string? Style { get; set; }


    [Parameter]
    public EventCallback<ConversationMessage> RestartConversation { get; set; }

    [Parameter]
    public EventCallback<ConversationMessage> CopyConversation { get; set; }

    [Parameter]
    public bool ShowBranches { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (Interop != null) await Interop.SetupCopyButtons();
        }
    }
}
